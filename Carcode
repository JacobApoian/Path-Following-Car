#include <ECE3.h>
uint16_t sensorValues[8];
uint16_t min[8] = {552, 621, 528, 551, 668, 574.4, 737, 622};
uint16_t max[8] = {1446, 1803.2, 1516, 1160, 1543, 1288.8, 1735.4, 1878};
int weights[8] = { -8, -4, -2, -1, 1, 2, 4, 8};
int ewNew;

const int left_nslp_pin = 31; // nslp HIGH ==> awake & ready for PWM
const int right_nslp_pin = 11; // nslp HIGH ==> awake & ready for PWM
const int left_dir_pin = 29;
const int right_dir_pin = 30;
const int left_pwm_pin = 40;
const int right_pwm_pin = 39;

const int LED_RF = 41;
int baseSpeed = 40;
int distance = 800;
boolean inTurn = false;
boolean virgin = true;
boolean done = false;
boolean finished = false;
float kp = 0.01;
float kd = 0.02;

void  ChangeBaseSpeed(int initialBaseSpd, int finalBaseSpd);
int errorWeight (uint16_t sensorValues[8]);
float pid(int ewOld, int ewNew);

void setup() {
  // put your setup code here, to run once:
  delay(2000);
  ECE3_Init();
  pinMode(left_nslp_pin, OUTPUT);
  pinMode(left_dir_pin, OUTPUT);
  pinMode(left_pwm_pin, OUTPUT);
  pinMode(right_nslp_pin, OUTPUT);
  pinMode(right_dir_pin, OUTPUT);
  pinMode(right_pwm_pin, OUTPUT);

  pinMode(LED_RF, OUTPUT);

  digitalWrite(left_nslp_pin, HIGH);
  digitalWrite(right_nslp_pin, HIGH);
  //  digitalWrite(left_nslp_pin,LOW);
  //  digitalWrite(right_nslp_pin,LOW);


  Serial.begin(9600); // set the data rate in bits per second for serial data transmission

  resetEncoderCount_left();
  resetEncoderCount_right();
  ChangeBaseSpeed(0, baseSpeed);
  //delay(5000);

}

void loop() {
  ECE3_read_IR(sensorValues);
  int turnCheck = 0;
  int ewOld = ewNew;
  int ewNew = errorWeight(sensorValues);
  int getL = getEncoderCount_left();

  if (!inTurn && !finished) {
    digitalWrite(left_dir_pin, LOW); // Set car direction to forward
    digitalWrite(right_dir_pin, LOW);
    analogWrite(left_pwm_pin, baseSpeed - pid(ewOld, ewNew)); // Maintain speed
    analogWrite(right_pwm_pin, baseSpeed + pid(ewOld, ewNew));

    for (unsigned char i = 0; i < 8; i++) {
      //Serial.print(sensorValues[i]);
      //Serial.print('\t'); // tab to format the raw data into columns in the Serial monitor
      turnCheck += sensorValues[i];
    }
    if (turnCheck >= 17500 && virgin) {
      inTurn = true;
      virgin = false;
      ChangeBaseSpeed(baseSpeed, 0);
      digitalWrite(left_dir_pin, HIGH); // Set car direction to forward
      digitalWrite(right_dir_pin, LOW);
      ChangeBaseSpeed(0, baseSpeed);
      resetEncoderCount_left();
      resetEncoderCount_right();
    }
    if (turnCheck >= 17500 && done && getL >= 1000) {
      ChangeBaseSpeed(baseSpeed, 0);
      kp = 0;
      kd = 0;
      finished = true;
    }
  }
  //ChangeBaseSpeed(0,baseSpeed); // Stat car up

  int getR = getEncoderCount_right();


  //Serial.println(ewNew);

  //newstuff





  if (inTurn) {

    analogWrite(left_pwm_pin, baseSpeed); // Maintain speed
    analogWrite(right_pwm_pin, baseSpeed);
    if (getR >= 350) {
      inTurn = false;
      resetEncoderCount_left();
      resetEncoderCount_right();
      done = true;

    }


    Serial.println();
    Serial.println(getR);

  }


  //Serial.println();
  //Serial.println(pid(ewOld, ewNew));



  //delay(200);


  // put your main code here, to run repeatedly:
  //need to normalize error. Make sure to multiply data by our weights
}
int errorWeight (uint16_t sensorValues[8]) {
  int ew = 0;
  int sv = 0;
  for (int i = 0; i < 8; i++) {
    sv = sensorValues[i] - min[i];
    if (sv == 0) {
      sv == 0;
    }
    else {
      sv = sv * 1000 / max[i];
    }
    ew += sv * weights[i];
  }
  return ew / 4;

}

float pid(int ewOld, int ewNew) {

  return kp * ewNew + kd * (ewNew + ewOld);
  //return kd*(ewNew-ewOld);
}
void  ChangeBaseSpeed(int initialBaseSpd, int finalBaseSpd) {
  /*
       This functin changes the car base speed gradually (in about 300 ms) from
       initialspeed to final speed. This non-instantaneous speed change reduces the
       load on the plastic geartrain, and reduces the failure rate of the motors.
  */
  int numSteps = 5;
  int pwmLeftVal = initialBaseSpd; // initialize left wheel speed
  int pwmRightVal = initialBaseSpd;  // initialize right wheel speed
  int deltaLeft = (finalBaseSpd - initialBaseSpd) / numSteps; // left in(de)crement
  int deltaRight = (finalBaseSpd - initialBaseSpd) / numSteps; // right in(de)crement

  for (int k = 0; k < numSteps; k++) {
    pwmLeftVal = pwmLeftVal + deltaLeft;
    pwmRightVal = pwmRightVal + deltaRight;
    analogWrite(left_pwm_pin, pwmLeftVal);
    analogWrite(right_pwm_pin, pwmRightVal);
    delay(60);
  } // end for int k
} // end void  ChangeBaseSpeed
